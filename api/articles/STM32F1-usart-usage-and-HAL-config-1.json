{"title":"STM32F1 usart usage and HAL config-1","slug":"STM32F1-usart-usage-and-HAL-config-1","date":"2021-08-18T12:17:16.000Z","updated":"2021-09-03T14:37:16.029Z","comments":true,"path":"api/articles/STM32F1-usart-usage-and-HAL-config-1.json","photos":[],"link":"","excerpt":"STM32F1系列HAL库配置串口通信简单来说，串口通信（Serial Communications）的概念非常简单，串口按位（bit）发送和接收字节。","covers":["https://img-blog.csdnimg.cn/c19018c969c0402aa1eb992916d3cfd1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/4f0117ea7ae544a8a02066a4c0ddcd27.png","https://img-blog.csdnimg.cn/371c689fcc154e38bbb2fe970b91ddcf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70"],"content":"<h1 id=\"STM32F1系列HAL库配置串口通信\"><a href=\"#STM32F1系列HAL库配置串口通信\" class=\"headerlink\" title=\"STM32F1系列HAL库配置串口通信\"></a>STM32F1系列HAL库配置串口通信</h1><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=29737634&auto=1&height=66\"></iframe>\n\n<p>简单来说，串口通信（Serial Communications）的概念非常简单，串口按位（bit）发送和接收字节。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"UART与USART简单讲解\"><a href=\"#UART与USART简单讲解\" class=\"headerlink\" title=\"UART与USART简单讲解\"></a>UART与USART简单讲解</h2><p><strong>UART</strong>: 通用异步收发传输器（Universal Asynchronous Receiver&#x2F;Transmitter)，通常称作 UART。它将要传输的资料在串行通信与并行通信之间加以转换。作为把并行输入信号转成串行输出信号的芯片，UART 通常被集成于其他通讯接口的连结上。<br><strong>USART</strong>:(Universal Synchronous&#x2F;Asynchronous Receiver&#x2F;Transmitter) 通用同步&#x2F;异步串行接收&#x2F;发送器,USART 是一个全双工通用同步&#x2F;异步串行收发模块，该接口是一个高度灵活的串行通信设备。<br>鉴于我理论知识不够，刚开始看到这些东西时，我：<br><img src=\"https://img-blog.csdnimg.cn/c19018c969c0402aa1eb992916d3cfd1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>什么全双工，同步，串行…这都是什么呀，趁着这点时间恶补了一下，大致能说出来个一点，<br><strong>串行与并行</strong><br><img src=\"https://img-blog.csdnimg.cn/08fea9bc298d45559d7d8ebef215e2d8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/4e98a7335b7a479795e2685f9e771753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如果我们发送0x55，二进制就是01010101，那么在串行通信中，就是一个位一个位依次发送，而在并行中就是八根线同时发送，很明显，串行虽然一个位一个位收发，但是只用一根线，节约成本；并行八根线，牺牲成本保证速度，但我们一般用串行，这里讲解也是以串行为例。<br><strong>单工与双工</strong><br><img src=\"https://img-blog.csdnimg.cn/1f128704d2064e1887c64bd8ec6310d3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>单工，我们只能一方发送的同时一方只能接收且对象固定，发送只能是发送，接受只能是接收，而双工又分为半双工与全双工，半双工对象可以变化，不过也是只能同时收发，而全双工除了上述提到的以外，还可以同时接收发，图例已经很形象了。<br>下面再说<strong>UART帧格式</strong>：<br><img src=\"https://img-blog.csdnimg.cn/e0b415ca344542d5a685961a4e4d7845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>像这样一个流程，一个数据流就发送接收完成了，举个例子：<br>像我们平时说话那样，如果我们作为接收方，当我们空闲时，我们可以接收别人发来的消息，那这空闲时，我们数据线是一直拉高的（1），当有人跟你说话时，首先向你示意（0），你此时可以放下手中的事，此时数据线为低电平，他给你说0x55，也就是01010101，他说完，此时校验完后，你又去干其他事了（1）。<br>&#x3D;&#x3D;可是真的这样简单吗&#x3D;&#x3D;？<br>像我就是那种不好好说话，还是空耳晚期，那我与其他人势必就会交流不畅，如果是我说<br>比如：我说了123，含糊不清，听到的人听成223，我以为我说的没问题，他以为他听的没问题，可事实确实有问题，这时怎么办？还记得之前提到的校验吗，如果，<br>我这样说”123 1+2+3&#x3D;6“，<br>他听成”223 2+2+3&#x3D;7“，他把7和我的6对应，<br>”哎，小兄弟你是不是有错误阿“<br>这样我们就能找出错误了，这就是校验，只不过我们这里用的是奇偶校验，就是看你01010101中1的个数，判断是否为奇数（校验位置0）还是偶数（1）。<br>再比如：我说”00001111”,和说“000111”，或者“11111111”，你会发现，前两个对方没法判断，几乎一模一样，注意是“说”，不是一字一字写给他，我“零——，一——”，“一————”你知道我说了几个零，几个一吗？<br><strong>不能！</strong><br>这时就不得不提到&#x3D;&#x3D;波特率&#x3D;&#x3D;与&#x3D;&#x3D;异步&#x3D;&#x3D;了<br><img src=\"https://img-blog.csdnimg.cn/1ccaca6fc0ff44e581ba8188c1661a54.png\" alt=\"在这里插入图片描述\"><br>我和对话人都有一个时钟（手表），我开始讲，每说一个位恰个时间，从起始位恰到终止位停止，接收方看到我掐时间也开始恰，看到我终止，他也终止，那么他就可以从时间上来看我说了几个0与1，波特率在这里起到时间起始终止的作用，如果波特率为1bps，那就是我说完一个位就终止，接收方听完一个位就终止，其他的就不听了。<br>&#x3D;&#x3D;你以为就谈话终止了吗&#x3D;&#x3D;？我的表可能慢也可能快，因为我和接收方不是一个时钟，这就是异步，即不是一个时钟线，所以，我们之间会有误差，并且，他看到我恰表的信息也需要时间，这是个小的时间差，但是积累起来足够大的话就是一个位的错误，所以，串口不能连续收发其中不间断，并且一次是8位（也有5，6位），不然会有累计误差。<br>只是一个例子，希望大家可以更快理解，也可以直接看B站上一个十分不错的课：<a href=\"https://www.bilibili.com/video/BV1WK4y1o7rd?p=1\">【讲的太透了！】UART、RS232、RS485、IIC、SPI 5种嵌入式经典总线协议</a><br>综上，串口通信差不多简单介绍了一下，接下来是CUBEMX的一般配置。</p>\n<h2 id=\"CUBEMX配置\"><a href=\"#CUBEMX配置\" class=\"headerlink\" title=\"CUBEMX配置\"></a>CUBEMX配置</h2><p>1.打开CUBEMX，选择你所使用的芯片，我所使用的STM32F103C8T6；<br>2.点开左边USART，选择异步（Asynchronous)，硬件控制流我们不要碰，默认即可；<br><img src=\"https://img-blog.csdnimg.cn/4f0117ea7ae544a8a02066a4c0ddcd27.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/dd0b210fb3334fc2905ed41dc830487c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.确认一下相关配置<br><img src=\"https://img-blog.csdnimg.cn/c5cd72ab24014b5586f92aaa0b55d774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/08f8ec253fb748528c603f4056fd4e40.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>Baud Rate</strong>: 波特率, 波特率表示每秒钟传送的码元符号的个数，是衡量数据传送速率的指标，它用单位时间内载波调制状态改变的次数来表示。对于串口最重要的就是波特率, 常用的波特率为 115200 与 9600。<br><strong>Wrod Length</strong> : 数据长<br><strong>Parity</strong> : 奇偶校验 -&gt; 无、奇校验、偶校验<br><strong>Stop</strong> : 停止位<br>以上的配置与需要通信双方完全配对<br>之后如我之前讲的一样<a href=\"https://blog.csdn.net/azs0504/article/details/119704345?spm=1001.2014.3001.5501\">上一节传送门</a></p>\n<h2 id=\"有关函数简介\"><a href=\"#有关函数简介\" class=\"headerlink\" title=\"有关函数简介\"></a>有关函数简介</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发送数据</span></span><br><span class=\"line\">HAL_StatusTypeDef <span class=\"title function_\">HAL_UART_Transmit</span><span class=\"params\">(UART_HandleTypeDef *huart, <span class=\"type\">uint8_t</span> *pData,</span></span><br><span class=\"line\"><span class=\"params\"><span class=\"type\">uint16_t</span> Size, <span class=\"type\">uint32_t</span> Timeout)</span>;</span><br><span class=\"line\"><span class=\"comment\">//接收数据</span></span><br><span class=\"line\">HAL_StatusTypeDef <span class=\"title function_\">HAL_UART_Receive</span><span class=\"params\">(UART_HandleTypeDef *huart, <span class=\"type\">uint8_t</span> *pData,</span></span><br><span class=\"line\"><span class=\"params\"><span class=\"type\">uint16_t</span> Size, <span class=\"type\">uint32_t</span> Timeout)</span>;</span><br><span class=\"line\"><span class=\"comment\">//发送中断</span></span><br><span class=\"line\">HAL_StatusTypeDef <span class=\"title function_\">HAL_UART_Transmit_IT</span><span class=\"params\">(UART_HandleTypeDef *huart, <span class=\"type\">uint8_t</span> *</span></span><br><span class=\"line\"><span class=\"params\">pData, <span class=\"type\">uint16_t</span> Size)</span>;</span><br><span class=\"line\"><span class=\"comment\">//接收中断</span></span><br><span class=\"line\">HAL_StatusTypeDef <span class=\"title function_\">HAL_UART_Receive_IT</span><span class=\"params\">(UART_HandleTypeDef *huart, <span class=\"type\">uint8_t</span> *pData</span></span><br><span class=\"line\"><span class=\"params\">, <span class=\"type\">uint16_t</span> Size)</span>;</span><br><span class=\"line\"><span class=\"comment\">//使用DMA发送</span></span><br><span class=\"line\">HAL_StatusTypeDef <span class=\"title function_\">HAL_UART_Transmit_DMA</span><span class=\"params\">(UART_HandleTypeDef *huart, <span class=\"type\">uint8_t</span> *</span></span><br><span class=\"line\"><span class=\"params\">pData, <span class=\"type\">uint16_t</span> Size)</span>;</span><br><span class=\"line\"><span class=\"comment\">//使用DMA接收</span></span><br><span class=\"line\">HAL_StatusTypeDef <span class=\"title function_\">HAL_UART_Receive_DMA</span><span class=\"params\">(UART_HandleTypeDef *huart, <span class=\"type\">uint8_t</span> *</span></span><br><span class=\"line\"><span class=\"params\">pData, <span class=\"type\">uint16_t</span> Size)</span>;</span><br><span class=\"line\"><span class=\"comment\">//DMA暂停</span></span><br><span class=\"line\">HAL_StatusTypeDef <span class=\"title function_\">HAL_UART_DMAPause</span><span class=\"params\">(UART_HandleTypeDef *huart)</span>;</span><br><span class=\"line\"><span class=\"comment\">//DMA恢复</span></span><br><span class=\"line\">HAL_StatusTypeDef <span class=\"title function_\">HAL_UART_DMAResume</span><span class=\"params\">(UART_HandleTypeDef *huart)</span>;</span><br><span class=\"line\"><span class=\"comment\">//DMA停止</span></span><br><span class=\"line\">HAL_StatusTypeDef <span class=\"title function_\">HAL_UART_DMAStop</span><span class=\"params\">(UART_HandleTypeDef *huart)</span>;</span><br></pre></td></tr></table></figure>\n<p>我们比较常用前两个，后面带IT是中断，还有DMA这些，之后我会简单说明这些函数如何使用。<br><img src=\"https://img-blog.csdnimg.cn/371c689fcc154e38bbb2fe970b91ddcf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","categories":[{"name":"基本功能食用","slug":"基本功能食用","count":10,"path":"api/categories/基本功能食用.json"}],"tags":[{"name":"STM32","slug":"STM32","count":10,"path":"api/tags/STM32.json"},{"name":"基本外设","slug":"基本外设","count":8,"path":"api/tags/基本外设.json"},{"name":"HAL库","slug":"HAL库","count":8,"path":"api/tags/HAL库.json"},{"name":"大一课程准备","slug":"大一课程准备","count":10,"path":"api/tags/大一课程准备.json"}]}