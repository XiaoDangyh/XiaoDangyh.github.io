{"title":"STM32F1系列HAL库配置外部中断——测量pwm频率","slug":"STM32F1系列HAL库配置外部中断——测量pwm频率","date":"2021-08-20T07:21:31.000Z","updated":"2021-09-03T14:34:18.751Z","comments":true,"path":"api/articles/STM32F1系列HAL库配置外部中断——测量pwm频率.json","photos":[],"link":"","excerpt":"STM32F1系列HAL库配置外部中断——测量pwm频率一.中断的简单介绍对于之前的串口配置，之所以把串口中断搁置是因为它牵扯到中断这一概念，而我觉得中断对于像我这样的初学者来说是较为难理解的概念，所以，我专门把中断这个应用拿出来。但是也是很浅显的一点点，毕竟中断牵扯的确实有点多，外部中断（EXIT），串口中断，ADC中断及各种外设中断，我并不想在这里解释太多，因为我自己还有很多地方要学习，所以把外部中断拿来分享一下。","covers":["https://img-blog.csdnimg.cn/83792a2577c24c7292e6b40d586cbd4a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/6acf4b0a0e4042d4abddeec045f84dac.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/ea4ebc77bdc945ad8adc914ddefaecb7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/ccfbd5d2daa14cd68eec7e46e44fb2f8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70"],"content":"<h1 id=\"STM32F1系列HAL库配置外部中断——测量pwm频率\"><a href=\"#STM32F1系列HAL库配置外部中断——测量pwm频率\" class=\"headerlink\" title=\"STM32F1系列HAL库配置外部中断——测量pwm频率\"></a>STM32F1系列HAL库配置外部中断——测量pwm频率</h1><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1366994516&auto=1&height=66\"></iframe>\n\n<h2 id=\"一-中断的简单介绍\"><a href=\"#一-中断的简单介绍\" class=\"headerlink\" title=\"一.中断的简单介绍\"></a>一.中断的简单介绍</h2><p>对于之前的串口配置，之所以把串口中断搁置是因为它牵扯到中断这一概念，而我觉得中断对于像我这样的初学者来说是较为难理解的概念，所以，我专门把中断这个应用拿出来。但是也是很浅显的一点点，毕竟中断牵扯的确实有点多，外部中断（EXIT），串口中断，ADC中断及各种外设中断，我并不想在这里解释太多，因为我自己还有很多地方要学习，所以把外部中断拿来分享一下。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h3><p>中断是指计算机正在运行程序时，出现某些意外需要主机干预，主机可以暂停正在进行的事情，转而去干预处理意外事件，等到处理完意外事件时，可以继续返回原先被暂停的事情中继续执行。</p>\n<h3 id=\"外部中断\"><a href=\"#外部中断\" class=\"headerlink\" title=\"外部中断\"></a>外部中断</h3><p>外部中断是单片机实时地处理外部事件的一种内部机制。当某种外部事件发生时，单片机的中断系统将迫使 CPU 暂停正在执行的程序，转而去进行中断事件的处理；中断处理完毕后．又返回被中断的程序处，继续执行下去。<br>（之后我们所说的中断无特殊说明均为外部中断。）<br>其中，我们还要理解优先级的概念，虽然我们摆脱了标准库函数中对于NVIC的各种配置（包括优先级的配置），但是还是要理解一下这个概念，如果，你设置了多个中断就需要考虑这些。</p>\n<p>eg.打个比方，你正在吃西瓜，但是西瓜不幸让你肚子难受起来。这个时候你要去<del>窜了</del> 上厕所，那么，这个上厕所就是意外事件，打断了你吃西瓜的事情，并且，上厕所这个事的优先级比吃西瓜要高，所以，你必须中断吃西瓜，而应该选择更重要的事<del>窜</del> ，可是，这时你妈妈敲门表示要进屋，这个优先级就更高了，你要先给妈妈开门，再去上厕所。等你上完了，这个中断事件完全结束，你又可以返回吃西瓜的状态了<del>可能你还要窜</del>。<br>“道理我都懂，单片机上怎么触发呢？”<br>我们这时需要一个中断源，他可能是按键，或者ADC等等，通过外部连接我们的IO口，实际上连接到我们单片机的控制模块上。我使用的STM32F103ZETx，144个IO口，对应16根中断线，其中是怎么运行的呢？<br>在STM32中文参考手册V10上表明了他的工作方式，我们可以看到PX对应的数字就是EXIT的中断线数字标号，这也同时说明了，如果我们使用PA0为中断对应IO，EXIT0就被用掉了，PB0再用中断IO就不可以了，而这些都是在EXIT的寄存器里修改的，（我只能说寄存器yyds），</p>\n<p><img src=\"https://img-blog.csdnimg.cn/83792a2577c24c7292e6b40d586cbd4a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>而在这张图的注释一中有关AFIO的注释，这与我们的GPIO可是不同，如果你看过库函数，对这个问题感兴趣，可以钻研一下，GPIO是不复用的通用输入输出引脚，而在原理图上一个引脚可能会有不同功能，这时要关注它挂在APB1还是APB2总线上，在这里给大家一个传送门供大家参考，以后有机会再赘述。<a href=\"https://blog.csdn.net/u013082827/article/details/77543394\">STM32F103：什么时候需要复用IO（AFIO）?</a><br><strong>下面我会演示用外部中断接收来自信号发生器的PWM信号。</strong></p>\n<h2 id=\"二-CUBEMX相关配置\"><a href=\"#二-CUBEMX相关配置\" class=\"headerlink\" title=\"二.CUBEMX相关配置\"></a>二.CUBEMX相关配置</h2><h3 id=\"1-初始化引脚\"><a href=\"#1-初始化引脚\" class=\"headerlink\" title=\"1.初始化引脚\"></a>1.初始化引脚</h3><p>最好在此之前打开之前配置好的uart工程，如果你想使用 PA1 作为外部中断的接收引脚，那么你只需要点击 PA1，在点击它对应的 GPIO_EXTIx。<br><img src=\"https://img-blog.csdnimg.cn/6acf4b0a0e4042d4abddeec045f84dac.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>这里我用used label注明PWM，以便我之后在中断函数中调用。</p>\n<h3 id=\"使能中断\"><a href=\"#使能中断\" class=\"headerlink\" title=\"使能中断\"></a>使能中断</h3><p>在GPIO里点击PA1，在下面configuration按图操作<br>这个地方与此前不同的地方在于 GPIO mode。<br>&#x3D;&#x3D;External&#x3D;&#x3D; Interrupt Mode with Rising edge trigger detection&#x2F;&#x2F;上升沿触发<br>&#x3D;&#x3D;External&#x3D;&#x3D; Interrupt Mode with Falling edge trigger detection&#x2F;&#x2F;下降沿触发<br>&#x3D;&#x3D;External&#x3D;&#x3D; Interrupt Mode with Rising&#x2F;Falling edge trigger detection&#x2F;&#x2F;上升沿或下降沿触发<br>注意标黄的地方，是外部中断，与后面的EVENT事件中断不一样，我们每接收一次PWM波中上升沿就进一次中断，之后pull down（拉低），以便再次接收到上升沿信号。<br><img src=\"https://img-blog.csdnimg.cn/ea4ebc77bdc945ad8adc914ddefaecb7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>点击NVIC，勾选EXIT line1 interrupt使能（ENBALE），<br><img src=\"https://img-blog.csdnimg.cn/89a4420c8101452487cde53be5391e6b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>Project Manager配置在之前我的文章里<a href=\"https://blog.csdn.net/azs0504/article/details/119704345?spm=1001.2014.3001.5501\">配置GPIO</a><br>之后检查无误后点击<img src=\"https://img-blog.csdnimg.cn/11ae9fd3822b499c81a26166cdc1b87a.png\" alt=\"在这里插入图片描述\"><br>生成代码文件。</p>\n<h3 id=\"3-添加相关代码\"><a href=\"#3-添加相关代码\" class=\"headerlink\" title=\"3.添加相关代码\"></a>3.添加相关代码</h3><p>在你的<code>/* USER CODE BEGIN 4 */</code>与<code>/* USER CODE END 4 */</code>之间添加</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">HAL_GPIO_EXTI_Callback</span><span class=\"params\">(<span class=\"type\">uint16_t</span> GPIO_Pin)</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是我们的外部中断回调函数，直接放在这里，其中加入我们的判断与中断相关操作，比如我们在这里判断检测的引脚是否接收到了GPIO_Pin_0的中断触发信号，这时我们将设置一个每检测一次就自增的值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(GPIO_Pin == PWM_Pin) </span><br><span class=\"line\">&#123; <span class=\"comment\">// 判断触发引脚是否是定义的引脚</span></span><br><span class=\"line\">pwm_value++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PV */</span></span><br><span class=\"line\"><span class=\"type\">int</span> pwm_value=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PV */</span></span><br></pre></td></tr></table></figure>\n<p>main函数中添加</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">pwm_value = <span class=\"number\">0</span>; <span class=\"comment\">// pwm_value置0，这个是必须要做的，数据要刷新</span></span><br><span class=\"line\">HAL_Delay(<span class=\"number\">1000</span>); <span class=\"comment\">// 延时1s</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[\\tmain]info:pwm_value=%d\\r\\n&quot;</span>,pwm_value); <span class=\"comment\">// 读取pwm_value</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译并运行，将信号发生器输出端连接在PA1上，再与单片机共地。<br>改变频率值，效果如图：<br><img src=\"https://img-blog.csdnimg.cn/ccfbd5d2daa14cd68eec7e46e44fb2f8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/da4c867cd17741d79b40cd2293761c06.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F6czA1MDQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","categories":[{"name":"基本功能食用","slug":"基本功能食用","count":10,"path":"api/categories/基本功能食用.json"}],"tags":[{"name":"STM32","slug":"STM32","count":10,"path":"api/tags/STM32.json"},{"name":"基本外设","slug":"基本外设","count":8,"path":"api/tags/基本外设.json"},{"name":"HAL库","slug":"HAL库","count":8,"path":"api/tags/HAL库.json"},{"name":"大一课程准备","slug":"大一课程准备","count":10,"path":"api/tags/大一课程准备.json"}]}