{"title":"python-learn-1","slug":"python-learn-1","date":"2022-02-15T04:50:35.000Z","updated":"2022-02-15T06:14:32.813Z","comments":true,"path":"api/articles/python-learn-1.json","photos":[],"link":"","excerpt":"1.18 [Figure] ","covers":["https://tse1-mm.cn.bing.net/th/id/R-C.4b4ec93aa91477d76cd4a50ec749b3f8?rik=I3Gdwho2//wbvg&riu=http://i2.hdslb.com/bfs/archive/436be3431b2c2a461dcc93b66fbc0e820e597718.jpg&ehk=rBkZ238pIOJb+ajQZVpv08xyMEe/9L+nQfir1nqZstc=&risl=&pid=ImgRaw&r=0","https://www.liaoxuefeng.com/files/attachments/923791878255456/0","https://www.liaoxuefeng.com/files/attachments/923792058613440/0","https://www.liaoxuefeng.com/files/attachments/923792191637760/0","https://www.liaoxuefeng.com/files/attachments/923923787018816/0","https://www.liaoxuefeng.com/files/attachments/923923759189600/0","C:\\Users\\26704\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220120094842716.png","C:\\Users\\26704\\Pictures\\QQ图片20210731211037.jpg"],"content":"<p>1.18</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1900488879&auto=1&height=66\"></iframe>\n\n<p><img src=\"https://tse1-mm.cn.bing.net/th/id/R-C.4b4ec93aa91477d76cd4a50ec749b3f8?rik=I3Gdwho2//wbvg&riu=http://i2.hdslb.com/bfs/archive/436be3431b2c2a461dcc93b66fbc0e820e597718.jpg&ehk=rBkZ238pIOJb+ajQZVpv08xyMEe/9L+nQfir1nqZstc=&risl=&pid=ImgRaw&r=0\" alt=\"查看源图像\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"PYTHON的数据类型：\"><a href=\"#PYTHON的数据类型：\" class=\"headerlink\" title=\"PYTHON的数据类型：\"></a><strong>PYTHON的数据类型：</strong></h3><p>一.整数：日常表示即可</p>\n<p>二.浮点数运算会有四舍五入误差</p>\n<p>三.字符串：以单引号和双引号括起来的任意文本，‘abc’与“abc”是一样的，如果</p>\n<p><strong><code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</strong>如果’ ‘“同时存在，用\\转义字符，</p>\n<p>注意：1.Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义;</p>\n<p>​           2.Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容;(三引号表示多行内容)</p>\n<p>四.布尔值：<strong>True<code>、</code>False</strong>可以用and,or,not计算</p>\n<p>五.空值None，**<code>None</code>是一个特殊的空值。**</p>\n<p>六.变量：变量不仅可以是数字，还可以是任意数据类型。变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头。</p>\n<p>”&#x3D;“是赋值，把任意数据类型赋值给变量，同一个变量可以反复赋值，这种变量本身是种动态变量，本身类型不固定，与之对应的是静态语言必须指定变量类型，否则赋值时会报错，</p>\n<p>七.理解变量在计算机内存中的表示也十分重要：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;ABC&#x27;</span></span><br><span class=\"line\">b = a</span><br><span class=\"line\">a = <span class=\"string\">&#x27;XYZ&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br></pre></td></tr></table></figure>\n\n<p>运行下来是ABC</p>\n<p><img src=\"https://www.liaoxuefeng.com/files/attachments/923791878255456/0\" alt=\"py-var-code-1\"></p>\n<p><img src=\"https://www.liaoxuefeng.com/files/attachments/923792058613440/0\" alt=\"py-var-code-2\"></p>\n<p><img src=\"https://www.liaoxuefeng.com/files/attachments/923792191637760/0\" alt=\"py-var-code-3\"></p>\n<p>八.常量：在Python中，通常用全部大写的变量名表示常量</p>\n<p>四舍五入地板除‘&#x2F;&#x2F;’</p>\n<p>注意：Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在<code>-2147483648</code>-<code>2147483647</code>。</p>\n<p>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为<code>inf</code>（无限大）。</p>\n<hr>\n<h4 id=\"字符串和编码\"><a href=\"#字符串和编码\" class=\"headerlink\" title=\"字符串和编码\"></a>字符串和编码</h4><p>一、字符编码：字符串也是一种数据类型，把文本转化为数字才能处理，八比特作为一个字节（255），由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<code>ASCII</code>编码，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p>\n<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。因此，Unicode字符集应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p>\n<p>Unicode标准也在不断发展，但最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>\n<p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>\n<p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p>\n<p><img src=\"https://www.liaoxuefeng.com/files/attachments/923923787018816/0\" alt=\"rw-file-utf-8\"></p>\n<p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p>\n<p><img src=\"https://www.liaoxuefeng.com/files/attachments/923923759189600/0\" alt=\"web-utf-8\"></p>\n<p>二、python的字符串：</p>\n<p><code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符，如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。python对于bytes类型的数据带b前缀的单引号或者双引号表示：</p>\n<p>x&#x3D;b‘ABC’</p>\n<p>要注意区分’ABC’<code>和</code>b’ABC’，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节。</p>\n<p>纯英文的str可以直接用ASCII码编码为bytes，含中文的str可以用UTF-8编码为bytes。含有中文的str却无法用ASCII编码；我们从网络或者磁盘上读取字节流，读到的数据是bytes，要把bytes变成str，用到decode(),</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b&#x27;ABC&#x27;</span>.decode(<span class=\"string\">&#x27;ascii&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;ABC&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b&#x27;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#x27;</span>.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>,errors=<span class=\"string\">&#x27;ignore&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>格式化%：</p>\n<p>在Python中，采用的格式化方式和C语言是一致的，用<code>%</code>实现，如果你不太确定应该用什么，<code>%s</code>永远起作用，它会把任何数据类型转换为字符串，有些时候，字符串里面的<code>%</code>是一个普通字符怎么办？这个时候就需要转义，用<code>%%</code>来表示一个<code>%</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;%2d-%02d&quot;</span>%(<span class=\"number\">3</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;%.2f&quot;</span>%<span class=\"number\">3.1415926</span>)</span><br></pre></td></tr></table></figure>\n\n<p>还有{0}，{1}…format(“xiao”,12),以及f-string:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = <span class=\"number\">2.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"number\">3.14</span> * r ** <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;The area of a circle with radius <span class=\"subst\">&#123;r&#125;</span> is <span class=\"subst\">&#123;s:<span class=\"number\">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class=\"line\">The area of a circle <span class=\"keyword\">with</span> radius <span class=\"number\">2.5</span> <span class=\"keyword\">is</span> <span class=\"number\">19.62</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;恭喜你&#123;0&#125;，你的成绩提升了&#123;1:.1f&#125;%！请继续努力&quot;</span>.<span class=\"built_in\">format</span>(name,r))</span><br><span class=\"line\">恭喜你小明，你的成绩提升了<span class=\"number\">18.1</span>%！请继续努力</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;恭喜你<span class=\"subst\">&#123;name&#125;</span>，你的成绩提升了<span class=\"subst\">&#123;r:<span class=\"number\">.1</span>f&#125;</span>%!请继续努力&#x27;</span>)</span><br><span class=\"line\">恭喜你小明，你的成绩提升了<span class=\"number\">18.1</span>%!请继续努力</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>1.20</p>\n<h2 id=\"使用list和tuple\"><a href=\"#使用list和tuple\" class=\"headerlink\" title=\"使用list和tuple\"></a>使用list和tuple</h2><p><strong>1.list有序集合</strong>，最后一个元素的索引是<code>len(classmates) - 1</code></p>\n<p>.append()追加元素末尾</p>\n<p>.insert(1,jack)</p>\n<p>.pop(i)删除</p>\n<p>替换直接赋值&#x3D;</p>\n<p>list可以包含list</p>\n<p><strong>2.元组tuple</strong>，不可修改</p>\n<p>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;t=(1,2)</span><br><span class=\"line\">&gt;&gt;&gt;t</span><br><span class=\"line\">(1,2)</span><br></pre></td></tr></table></figure>\n\n<p>定义空的tuple：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=()</span><br><span class=\"line\">t</span><br><span class=\"line\">()</span><br></pre></td></tr></table></figure>\n\n<p>元组歧义</p>\n<p>如果要定义一个数量为一的元组<br>入坑写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=(1)</span><br></pre></td></tr></table></figure>\n\n<p>这样的话是定义的不是tuple而是一个数，这是因为括号<code>()</code>既可以表示tuple，又可以表示数学公式中的小括号，消除歧义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t</span><br><span class=\"line\">(<span class=\"number\">1</span>,)</span><br></pre></td></tr></table></figure>\n\n<p>“可变”tuple：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;t=(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,[<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"string\">&#x27;Y&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t</span><br><span class=\"line\">(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, [<span class=\"string\">&#x27;X&#x27;</span>, <span class=\"string\">&#x27;Y&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<p>改变过程实际上是改变的list，而tuple所指对象并没发生变化</p>\n<p><img src=\"C:\\Users\\26704\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220120094842716.png\" alt=\"image-20220120094842716\"></p>\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h2><hr>\n<h2 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><p>1.条件判断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;adult&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;teenager&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;kid&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是if判断一次成功后，就直接跳过剩下的elif，即使满足条件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;age = <span class=\"number\">20</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;adult&#x27;</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;teenager&#x27;</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;kid&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">adult</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.再议input</strong></p>\n<p>input()读取用用户输入，但返回是个str，可以用int()进行类型转化，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;birth: &#x27;</span>)</span><br><span class=\"line\">birth = <span class=\"built_in\">int</span>(s)</span><br><span class=\"line\"><span class=\"keyword\">if</span> birth &lt; <span class=\"number\">2000</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;00前&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">height = <span class=\"number\">1.75</span></span><br><span class=\"line\">weight = <span class=\"number\">80.5</span></span><br><span class=\"line\">bmi = weight/(height*height)</span><br><span class=\"line\"><span class=\"keyword\">if</span> bmi&gt;<span class=\"number\">32</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你的BMI为&#123;0:.2f&#125;,严重肥胖&#x27;</span>.<span class=\"built_in\">format</span>(bmi))</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">28</span>&lt;=bmi&lt;=<span class=\"number\">32</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你的BMI为&#123;0:.2f&#125;,肥胖&#x27;</span>.<span class=\"built_in\">format</span>(bmi))</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">25</span>&lt;=bmi&lt;<span class=\"number\">28</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你的BMI为&#123;0:.2f&#125;,过重&#x27;</span>.<span class=\"built_in\">format</span>(bmi))</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">18.5</span>&lt;=bmi&lt;<span class=\"number\">25</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你的BMI为&#123;0:.2f&#125;,正常&#x27;</span>.<span class=\"built_in\">format</span>(bmi))</span><br><span class=\"line\"><span class=\"keyword\">if</span> bmi&lt;<span class=\"number\">18.5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你的BMI为&#123;0:.2f&#125;,过轻&#x27;</span>.<span class=\"built_in\">format</span>(bmi))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3.<strong>循环</strong></p>\n<p>①for x in …把每个元素带入变量x，然后执行缩进块的语句，</p>\n<p>如果要计算1-100的整数之和,Python提供一个<code>range()</code>函数，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">range</span>（<span class=\"number\">5</span>）</span><br><span class=\"line\">[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n\n<p>②while循环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">n = <span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + n</span><br><span class=\"line\">    n = n - <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>)</span><br></pre></td></tr></table></figure>\n\n<p>③break</p>\n<p>④<code>continue</code>的作用是提前结束本轮循环，并直接开始下一轮循环</p>\n<p><img src=\"C:\\Users\\26704\\Pictures\\QQ图片20210731211037.jpg\">有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用<code>Ctrl+C</code>退出程序，或者强制结束Python进程。</p>\n<p>4.<strong>使用dict和set</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">&#x27;Michael&#x27;</span>]</span><br><span class=\"line\"><span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n\n<p>dict这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。</p>\n<p>避免key不存在的方法，in或者get（）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;Thomas&#x27;</span> <span class=\"keyword\">in</span> d</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\">&gt;&gt;&gt;d.get(<span class=\"string\">&#x27;Thomas&#x27;</span>)</span><br><span class=\"line\">&gt;&gt;&gt;d.get(<span class=\"string\">&#x27;Thomas&#x27;</span>,-<span class=\"number\">1</span>)<span class=\"comment\">#或者自己指定的值</span></span><br></pre></td></tr></table></figure>\n\n<p>dict是用空间来换取时间的一种方法，第一条就是dict的key必须是<strong>不可变对象</strong>，因为dict根据key来计算value的存储位置（哈希算法），字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>key = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[key] = <span class=\"string\">&#x27;a list&#x27;</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: unhashable <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>下来是set</p>\n<p>是一组key的合集，但不储存value，提供list作为输入合集，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不重复</p>\n<p>s.add(key)</p>\n<p>s.remove(key)</p>\n<p>s可以看作数学上的集合&amp;，|都可以运算</p>\n<p>5.<strong>不可变对象</strong></p>\n<p>对str的操作，用replace（）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;a=<span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\">&gt;&gt;&gt;b=a.replace(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">&gt;&gt;&gt;b</span><br><span class=\"line\"><span class=\"string\">&#x27;Abc&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对象<code>a</code>的内容是<code>&#39;abc&#39;</code>，但其实是指，<code>a</code>本身是一个变量，它指向的对象的内容才是<code>&#39;abc&#39;</code></p>\n<p>变量<code>a</code>仍指向原有的字符串<code>&#39;abc&#39;</code>，但变量<code>b</code>却指向新字符串<code>&#39;Abc&#39;</code></p>\n<blockquote>\n<p>要理解dict的有关内容需要你理解哈希表（map）的相关基础知识，这个其实是《算法与数据结构》里面的内容。</p>\n<p>1.list和tuple其实是用链表顺序存储的，也就是前一个元素中存储了下一个元素的位置，这样只要找到第一个元素的位置就可以顺藤摸瓜找到所有元素的位置，所以list的名字其实就是个指针，指向list的第一个元素的位置。list的插入和删除等可以直接用链表的方式进行，比如我要在第1个元素和第2个元素中间插入一个元素，那么直接在链表的最后面（我们假设这个list只有两个元素，那么也就是在第3个元素的位置上）插入这个元素，然后把第一个元素指针指向这个元素（第3个位置），然后再把新插入的元素的指针指向原来的第2个元素，这样插入操作就完成了。读取这个list的时候，先用list的名字（就是个指针，指向第1个元素的位置）找到第一个元素，然后用第1一个元素的指针找到第2个元素（位置3），然后用第2个元素的指针找到第3个元素（位置2），以此类推。所以list的顺序和内存中的实际顺序其实不一定完全对应。这种存储方式不会浪费内存，但查找起来特别费时间，因为要按照链表一个一个找下去，如果你的list特别大的话，那么要等好久才会找到结果。</p>\n<p>2.dict则为了快速查找使用了一种特别的方法，哈希表。哈希表采用哈希函数从key计算得到一个数字（哈希函数有个特点：对于不同的key，有很大的概率得到的哈希值也不同），然后直接把value存储到这个数字所对应的地址上，比如key&#x3D;’ABC’，value&#x3D;10，经过哈希函数得到key对应的哈希值为123，那么就申请一个有1000个地址（从0到999）的内存，然后把10存放在地址为123的地方。类似的，对于key&#x3D;’BCD’，value&#x3D;20，得到key的哈希值为234，那么就把20存放在地址为234的地方。对于这样的表查找起来是非常方便的。只要给出key，计算得到哈希值，然后直接到对应的地址去找value就可以了。无论有几个元素，都可以直接找到value，无需遍历整个表。不过虽然dict查找速度快，但内存浪费严重，你看我们只存储了两个元素，都要申请一个长度为1000的内存。</p>\n<p>3.现在你知道为啥key要用不可变对象了吧？因为不可变对象是常量，每次的哈希值算出来都是固定的，这样就不会出错。比如key&#x3D;’ABC’，value&#x3D;10，存储地址为123，假设我突发奇想，把key改成’BCD’，那么当查找’BCD’的value的时候就会去234的地址找，但那里啥也没有，这就乱套了。</p>\n<p>3.你看我们上面有一句话：对于不同的key，有很大的概率得到的哈希值也不同。那么有很小的概率不同的key可以得到相同的哈希值了？没错，比如对于我们的例子来说，哈希值只有3位，那么只要元素个数超过1000，就一定会有至少两个key的哈希值相同（鸽笼原理），这种情况叫“冲突”，设计哈希表的时候要采取办法减少冲突，实在冲突了也要想办法补救。不过这是编译器的事情，况且对于初学者的我们来说碰到的冲突的概率基本等于零，就不用操心了。</p>\n</blockquote>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>abs（）</p>\n<p>max（）</p>\n<h3 id=\"数据类型转换：\"><a href=\"#数据类型转换：\" class=\"headerlink\" title=\"数据类型转换：\"></a>数据类型转换：</h3><p>int&#x2F;float&#x2F;str&#x2F;bool&#x2F;hex（）</p>\n<h3 id=\"定义函数：\"><a href=\"#定义函数：\" class=\"headerlink\" title=\"定义函数：\"></a>定义函数：</h3><p>1.空函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">nop</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span><span class=\"comment\">#作为占位符</span></span><br></pre></td></tr></table></figure>\n\n<p><em>参数检查</em>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_abs</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(x,(<span class=\"built_in\">int</span>,<span class=\"built_in\">float</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">raise</span> TypeError(<span class=\"string\">&#x27;bad operand type&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x&gt;=<span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> x</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -x</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2.返回多个值</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">move</span>(<span class=\"params\">x, y, step, angle=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">    nx = x + step * math.cos(angle)</span><br><span class=\"line\">    ny = y - step * math.sin(angle)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nx, ny</span><br></pre></td></tr></table></figure>\n\n<p>假象：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x, y)</span><br><span class=\"line\"><span class=\"number\">151.96152422706632</span> <span class=\"number\">70.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(r)</span><br><span class=\"line\">(<span class=\"number\">151.96152422706632</span>, <span class=\"number\">70.0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>返回的只是一个tuple，一个tuple可以省略括号，多个变量可以同时接收一个tuple</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quadratic</span>(<span class=\"params\">a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(a <span class=\"keyword\">or</span> b <span class=\"keyword\">or</span> c,(<span class=\"built_in\">int</span>,<span class=\"built_in\">float</span>)):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">&#x27;bad operand type&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a==<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;meaningless&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> b*b-<span class=\"number\">2</span>*a*c&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;no solution&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> b**<span class=\"number\">2</span>-<span class=\"number\">2</span>*a*c&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> b**<span class=\"number\">2</span>-<span class=\"number\">2</span>*a*c==<span class=\"number\">0</span>:</span><br><span class=\"line\">                x=-b/<span class=\"number\">2</span>*a</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;两个相同的实数解<span class=\"subst\">&#123;x&#125;</span>&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                x1=(-b + math.sqrt(b**<span class=\"number\">2</span>-<span class=\"number\">4</span>*a*c))/(<span class=\"number\">2</span>*a)</span><br><span class=\"line\">                x2=(-b - math.sqrt(b**<span class=\"number\">2</span>-<span class=\"number\">4</span>*a*c))/(<span class=\"number\">2</span>*a)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;两个不相同的实数解<span class=\"subst\">&#123;x1&#125;</span>,<span class=\"subst\">&#123;x2&#125;</span>&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x1,x2</span><br><span class=\"line\"><span class=\"comment\"># 测试:</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;quadratic(2, 3, 1) =&#x27;</span>, quadratic(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;quadratic(1, 3, -4) =&#x27;</span>, quadratic(<span class=\"number\">1</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> quadratic(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>) != (-<span class=\"number\">0.5</span>, -<span class=\"number\">1.0</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> quadratic(<span class=\"number\">1</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>) != (<span class=\"number\">1.0</span>, -<span class=\"number\">4.0</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试成功&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h3><p>1.位置参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">power</span>(<span class=\"params\">x,n</span>)</span><br><span class=\"line\">\ts=<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> n&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">\t\tn=n-<span class=\"number\">1</span></span><br><span class=\"line\">\t\ts=s*x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>x,n是位置参数</p>\n<p>2.默认参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">enroll</span>(<span class=\"params\">name, gender, age=<span class=\"number\">6</span>, city=<span class=\"string\">&#x27;Beijing&#x27;</span></span>):</span><br></pre></td></tr></table></figure>\n\n<p>坑：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_end</span>(<span class=\"params\">L=[]</span>)<span class=\"comment\">#默认参数为list</span></span><br><span class=\"line\">\tL.append(<span class=\"string\">&#x27;END&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> L</span><br></pre></td></tr></table></figure>\n\n<p>当你使用默认参数时，一开始结果是对的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_end()</span><br><span class=\"line\">[<span class=\"string\">&#x27;END&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#多次调用</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</span><br><span class=\"line\">[<span class=\"string\">&#x27;END&#x27;</span>, <span class=\"string\">&#x27;END&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</span><br><span class=\"line\">[<span class=\"string\">&#x27;END&#x27;</span>, <span class=\"string\">&#x27;END&#x27;</span>, <span class=\"string\">&#x27;END&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p>\n<p>要修改上面的例子，我们可以用<code>None</code>这个不变对象来实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_end</span>(<span class=\"params\">L=[]</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> L=<span class=\"literal\">None</span></span><br><span class=\"line\">\t\tL=[]</span><br><span class=\"line\">\tL.append(<span class=\"string\">&#x27;END&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> L</span><br></pre></td></tr></table></figure>\n\n<p>3.可变参数</p>\n<p>传入参数个数可变，</p>\n<p>思路一：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calc</span>(<span class=\"params\">numbers</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>=<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">\t\t<span class=\"built_in\">sum</span>=<span class=\"built_in\">sum</span>+n*n</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n\n<p>作为list和tuple传进来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;calc([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\">&gt;&gt;&gt;calc((<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"number\">84</span></span><br></pre></td></tr></table></figure>\n\n<p>思路二：</p>\n<p>利用可变参数，调用函数方式，在函数内部，参数<code>numbers</code>接收到的是一个<strong>tuple</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calc</span>(<span class=\"params\">*numbers</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>=<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">\t\t<span class=\"built_in\">sum</span>=<span class=\"built_in\">sum</span>+n*n</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n\n<p>如果已经有一个list或者tuple，要调用一个可变参数怎么办？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">calc(sums[<span class=\"number\">0</span>],sums[<span class=\"number\">1</span>],sums[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">#更加有用</span></span><br><span class=\"line\">calc(*nums)</span><br></pre></td></tr></table></figure>\n\n<p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。</p>\n<p>4.关键字参数：</p>\n<p>可变参数允许你传入0个或者任意个参数，在函数调用时组装成tuple，关键字参数允许你传入0个或者任意个含参数名的参数，在函数调用时组装成dict，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person</span>(<span class=\"params\">name,age,**kw</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;name:&#x27;</span>,name,<span class=\"string\">&#x27;age:&#x27;</span>,age,<span class=\"string\">&#x27;other:&#x27;</span>,kw)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">name: Michael age: <span class=\"number\">30</span> other: &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"number\">35</span>, city=<span class=\"string\">&#x27;Beijing&#x27;</span>)</span><br><span class=\"line\">name: Bob age: <span class=\"number\">35</span> other: &#123;<span class=\"string\">&#x27;city&#x27;</span>: <span class=\"string\">&#x27;Beijing&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">&#x27;Adam&#x27;</span>, <span class=\"number\">45</span>, gender=<span class=\"string\">&#x27;M&#x27;</span>, job=<span class=\"string\">&#x27;Engineer&#x27;</span>)</span><br><span class=\"line\">name: Adam age: <span class=\"number\">45</span> other: &#123;<span class=\"string\">&#x27;gender&#x27;</span>: <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;job&#x27;</span>: <span class=\"string\">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>extra = &#123;<span class=\"string\">&#x27;city&#x27;</span>: <span class=\"string\">&#x27;Beijing&#x27;</span>, <span class=\"string\">&#x27;job&#x27;</span>: <span class=\"string\">&#x27;Engineer&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"number\">24</span>, city=extra[<span class=\"string\">&#x27;city&#x27;</span>], job=extra[<span class=\"string\">&#x27;job&#x27;</span>])</span><br><span class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">&#x27;city&#x27;</span>: <span class=\"string\">&#x27;Beijing&#x27;</span>, <span class=\"string\">&#x27;job&#x27;</span>: <span class=\"string\">&#x27;Engineer&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">#更优写法</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"number\">24</span>, **extra)</span><br></pre></td></tr></table></figure>\n\n<p>5.命名关键字参数：</p>\n<p>限制关键字参数的名字，就可以用命名关键字参数，例如，只接收<code>city</code>和<code>job</code>作为关键字参数。这种方式定义的函数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person</span>(<span class=\"params\">name, age, *, city, job</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name, age, city, job)</span><br></pre></td></tr></table></figure>\n\n<p>特殊分隔符**<code>*</code><strong>，</strong><code>*</code>**后面的参数被视为命名关键字参数。</p>\n<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person</span>(<span class=\"params\">name, age, *args, city, job</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name, age, args, city, job)</span><br></pre></td></tr></table></figure>\n\n<p>命名关键字参数必须传入参数名，这和位置参数不同：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"number\">24</span>, <span class=\"string\">&#x27;Beijing&#x27;</span>, <span class=\"string\">&#x27;Engineer&#x27;</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: person() missing <span class=\"number\">2</span> required keyword-only arguments: <span class=\"string\">&#x27;city&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;job&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Python解释器把前两个参数视为位置参数，后两个参数传给<code>*args</code>，但缺少命名关键字参数导致报错</p>\n<p>命名关键字参数可以有缺省值，从而简化调用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person</span>(<span class=\"params\">name, age, *, city=<span class=\"string\">&#x27;Beijing&#x27;</span>, job</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name, age, city, job)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"number\">24</span>, job=<span class=\"string\">&#x27;Engineer&#x27;</span>)</span><br><span class=\"line\">Jack <span class=\"number\">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure>\n\n<p>如果没有可变参数，就必须加一个<code>*</code>作为特殊分隔符。如果缺少<code>*</code>，Python解释器将无法识别位置参数和命名关键字参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person</span>(<span class=\"params\">name, age, city, job</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 缺少 *，city和job被视为位置参数</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>6.参数组合：</p>\n<p>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f1</span>(<span class=\"params\">a, b, c=<span class=\"number\">0</span>, *args, **kw</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a =&#x27;</span>, a, <span class=\"string\">&#x27;b =&#x27;</span>, b, <span class=\"string\">&#x27;c =&#x27;</span>, c, <span class=\"string\">&#x27;args =&#x27;</span>, args, <span class=\"string\">&#x27;kw =&#x27;</span>, kw)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f2</span>(<span class=\"params\">a, b, c=<span class=\"number\">0</span>, *, d, **kw</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a =&#x27;</span>, a, <span class=\"string\">&#x27;b =&#x27;</span>, b, <span class=\"string\">&#x27;c =&#x27;</span>, c, <span class=\"string\">&#x27;d =&#x27;</span>, d, <span class=\"string\">&#x27;kw =&#x27;</span>, kw)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">0</span> args = () kw = &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">1</span>, <span class=\"number\">2</span>, c=<span class=\"number\">3</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> args = () kw = &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> args = (<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>) kw = &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, x=<span class=\"number\">99</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> args = (<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>) kw = &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">99</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2(<span class=\"number\">1</span>, <span class=\"number\">2</span>, d=<span class=\"number\">99</span>, ext=<span class=\"literal\">None</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">0</span> d = <span class=\"number\">99</span> kw = &#123;<span class=\"string\">&#x27;ext&#x27;</span>: <span class=\"literal\">None</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的：（一个tuple+dict）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>args = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>kw = &#123;<span class=\"string\">&#x27;d&#x27;</span>: <span class=\"number\">99</span>, <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"string\">&#x27;#&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(*args, **kw)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> args = (<span class=\"number\">4</span>,) kw = &#123;<span class=\"string\">&#x27;d&#x27;</span>: <span class=\"number\">99</span>, <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"string\">&#x27;#&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>args = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>kw = &#123;<span class=\"string\">&#x27;d&#x27;</span>: <span class=\"number\">88</span>, <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"string\">&#x27;#&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2(*args, **kw)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> d = <span class=\"number\">88</span> kw = &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"string\">&#x27;#&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fact</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * fact(n - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试<code>fact(1000)</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fact(<span class=\"number\">1000</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">4</span>, <span class=\"keyword\">in</span> fact</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">4</span>, <span class=\"keyword\">in</span> fact</span><br><span class=\"line\">RuntimeError: maximum recursion depth exceeded <span class=\"keyword\">in</span> comparison</span><br></pre></td></tr></table></figure>\n\n<p>解决递归调用栈溢出的方法是通过<strong>尾递归</strong>优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。</p>\n<p>尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。</p>\n<p>上面的<code>fact(n)</code>函数由于<code>return n * fact(n - 1)</code>引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fact</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fact_iter(n, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fact_iter</span>(<span class=\"params\">num, product</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fact_iter(num - <span class=\"number\">1</span>, num * product)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://baike.baidu.com/view/191666.htm\">汉诺塔</a>的移动可以用递归函数非常简单地实现。</p>\n<p>请编写<code>move(n, a, b, c)</code>函数，它接收参数<code>n</code>，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">move</span>(<span class=\"params\">n, a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(a, <span class=\"string\">&#x27;--&gt;&#x27;</span>, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        move(n-<span class=\"number\">1</span>,a,b,c)</span><br><span class=\"line\">        move(<span class=\"number\">1</span>,a,c,b)</span><br><span class=\"line\">        move(n-<span class=\"number\">1</span>,c,a,b)</span><br><span class=\"line\"><span class=\"comment\"># 期待输出:</span></span><br><span class=\"line\"><span class=\"comment\"># A --&gt; C</span></span><br><span class=\"line\"><span class=\"comment\"># A --&gt; B</span></span><br><span class=\"line\"><span class=\"comment\"># C --&gt; B</span></span><br><span class=\"line\"><span class=\"comment\"># A --&gt; C</span></span><br><span class=\"line\"><span class=\"comment\"># B --&gt; A</span></span><br><span class=\"line\"><span class=\"comment\"># B --&gt; C</span></span><br><span class=\"line\"><span class=\"comment\"># A --&gt; C</span></span><br><span class=\"line\">move(<span class=\"number\">3</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"python笔记","slug":"python笔记","count":3,"path":"api/categories/python笔记.json"}],"tags":[{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"}]}