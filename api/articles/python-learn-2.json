{"title":"python-learn-2","slug":"python-learn-2","date":"2022-02-15T06:16:45.000Z","updated":"2022-02-15T06:26:19.411Z","comments":true,"path":"api/articles/python-learn-2.json","photos":[],"link":"","excerpt":" [Figure] ","covers":["https://tse1-mm.cn.bing.net/th/id/R-C.4b4ec93aa91477d76cd4a50ec749b3f8?rik=I3Gdwho2//wbvg&riu=http://i2.hdslb.com/bfs/archive/436be3431b2c2a461dcc93b66fbc0e820e597718.jpg&ehk=rBkZ238pIOJb+ajQZVpv08xyMEe/9L+nQfir1nqZstc=&risl=&pid=ImgRaw&r=0","C:\\Users\\26704\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220128103732031.png"],"content":"<p><img src=\"https://tse1-mm.cn.bing.net/th/id/R-C.4b4ec93aa91477d76cd4a50ec749b3f8?rik=I3Gdwho2//wbvg&riu=http://i2.hdslb.com/bfs/archive/436be3431b2c2a461dcc93b66fbc0e820e597718.jpg&ehk=rBkZ238pIOJb+ajQZVpv08xyMEe/9L+nQfir1nqZstc=&risl=&pid=ImgRaw&r=0\" alt=\"查看源图像\"></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=530 height=86 src=\"//music.163.com/outchain/player?type=2&id=571541787&auto=0&height=66\"></iframe>\n\n<span id=\"more\"></span>\n\n<h1 id=\"1-22-python学习笔记\"><a href=\"#1-22-python学习笔记\" class=\"headerlink\" title=\"1.22 python学习笔记\"></a>1.22 python学习笔记</h1><h2 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h2><h3 id=\"切片（slice）\"><a href=\"#切片（slice）\" class=\"headerlink\" title=\"切片（slice）\"></a>切片（slice）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Sarah&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Jack&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">0</span>:<span class=\"number\">3</span>]<span class=\"comment\">#左闭右开，也可简写为L[:3]</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Sarah&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>记住倒数第一个元素的索引是<code>-1</code>。</p>\n<p>隔多少取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;L[::5]</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接复制一个list出来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;L[:]</span><br><span class=\"line\">[0,1,2,3,4,5,6,7...]</span><br></pre></td></tr></table></figure>\n\n<p>tuple也是一种list，唯一区别tuple不可变，因此，tuple也可以用切片操作，只是操作的结果仍是tuple。</p>\n<p>其他语言中，针对字符串有很多截取函数，Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。</p>\n<p>删除首尾字符串空格函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">trim</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> s == <span class=\"string\">&#x27;&#x27;</span>:</span><br><span class=\"line\">            s = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> s</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27; &#x27;</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(s) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                s = s[<span class=\"number\">1</span>:]</span><br><span class=\"line\">            <span class=\"keyword\">while</span> s[-<span class=\"number\">1</span>] == <span class=\"string\">&#x27; &#x27;</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(s) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                s = s[:-<span class=\"number\">2</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27; &#x27;</span> <span class=\"keyword\">or</span> s[-<span class=\"number\">1</span>] == <span class=\"string\">&#x27; &#x27;</span>:</span><br><span class=\"line\">                s = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> s</span><br><span class=\"line\"><span class=\"comment\"># 测试:</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> trim(<span class=\"string\">&#x27;hello  &#x27;</span>) != <span class=\"string\">&#x27;hello&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> trim(<span class=\"string\">&#x27;  hello&#x27;</span>) != <span class=\"string\">&#x27;hello&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> trim(<span class=\"string\">&#x27;  hello  &#x27;</span>) != <span class=\"string\">&#x27;hello&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> trim(<span class=\"string\">&#x27;  hello  world  &#x27;</span>) != <span class=\"string\">&#x27;hello  world&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> trim(<span class=\"string\">&#x27;&#x27;</span>) != <span class=\"string\">&#x27;&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> trim(<span class=\"string\">&#x27;    &#x27;</span>) != <span class=\"string\">&#x27;&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试成功!&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h3><p>for循环遍历list和tuple，python的for循环迭代更抽象，只要是可迭代对象都可迭代，比如dict，迭代的是key：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> d:</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(key)</span><br><span class=\"line\">...</span><br><span class=\"line\">a</span><br><span class=\"line\">c</span><br><span class=\"line\">b</span><br></pre></td></tr></table></figure>\n\n<p>value：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> d.values()</span><br></pre></td></tr></table></figure>\n\n<p>key&amp;value</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> d.items()</span><br></pre></td></tr></table></figure>\n\n<p>字符串也是可迭代对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> <span class=\"string\">&#x27;ABC&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(ch)</span><br><span class=\"line\">A</span><br><span class=\"line\">B</span><br><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n\n<p>判断是否可以迭代：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections.abc <span class=\"keyword\">import</span> Iterable</span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(<span class=\"string\">&#x27;abc&#x27;</span>,Iterable)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(<span class=\"number\">123</span>,Iterable)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p>enumerate函数可以将list变成索引-元素对，在for循环中同时迭代索引和元素本身</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i,value <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>([<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>]):</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(i,value)</span><br></pre></td></tr></table></figure>\n\n<p>请使用迭代查找一个list中最小和最大值，并返回一个tuple：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">findMinAndMax</span>(<span class=\"params\">L</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> L==[]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"literal\">None</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">max</span>=<span class=\"built_in\">min</span>=L[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x&gt;=<span class=\"built_in\">max</span>:</span><br><span class=\"line\">                <span class=\"built_in\">max</span>=x</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x&lt;=<span class=\"built_in\">min</span>:</span><br><span class=\"line\">                <span class=\"built_in\">min</span>=x</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(<span class=\"built_in\">min</span>,<span class=\"built_in\">max</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列表生成器\"><a href=\"#列表生成器\" class=\"headerlink\" title=\"列表生成器\"></a>列表生成器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;[x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">11</span>)]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\">&gt;&gt;&gt;[x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">11</span>) <span class=\"keyword\">if</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">16</span>, <span class=\"number\">36</span>, <span class=\"number\">64</span>, <span class=\"number\">100</span>]</span><br></pre></td></tr></table></figure>\n\n<p>或者两层循环全排列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[m + n <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"string\">&#x27;ABC&#x27;</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"string\">&#x27;XYZ&#x27;</span>]</span><br><span class=\"line\">[<span class=\"string\">&#x27;AX&#x27;</span>, <span class=\"string\">&#x27;AY&#x27;</span>, <span class=\"string\">&#x27;AZ&#x27;</span>, <span class=\"string\">&#x27;BX&#x27;</span>, <span class=\"string\">&#x27;BY&#x27;</span>, <span class=\"string\">&#x27;BZ&#x27;</span>, <span class=\"string\">&#x27;CX&#x27;</span>, <span class=\"string\">&#x27;CY&#x27;</span>, <span class=\"string\">&#x27;CZ&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os <span class=\"comment\"># 导入os模块，模块的概念后面讲到</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[d <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;.&#x27;</span>)] <span class=\"comment\"># os.listdir可以列出文件和目录</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;.emacs.d&#x27;</span>, <span class=\"string\">&#x27;.ssh&#x27;</span>, <span class=\"string\">&#x27;.Trash&#x27;</span>, <span class=\"string\">&#x27;Adlm&#x27;</span>, <span class=\"string\">&#x27;Applications&#x27;</span>, <span class=\"string\">&#x27;Desktop&#x27;</span>, <span class=\"string\">&#x27;Documents&#x27;</span>, <span class=\"string\">&#x27;Downloads&#x27;</span>, <span class=\"string\">&#x27;Library&#x27;</span>, <span class=\"string\">&#x27;Movies&#x27;</span>, <span class=\"string\">&#x27;Music&#x27;</span>, <span class=\"string\">&#x27;Pictures&#x27;</span>, <span class=\"string\">&#x27;Public&#x27;</span>, <span class=\"string\">&#x27;VirtualBox VMs&#x27;</span>, <span class=\"string\">&#x27;Workspace&#x27;</span>, <span class=\"string\">&#x27;XCode&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>for 可以使用两个甚至多个变量，比如dict的items（）同时迭key和value</p>\n<p>因此，列表生成式也可以使用两个变量来生成list：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;z&#x27;</span>: <span class=\"string\">&#x27;C&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[k + <span class=\"string\">&#x27;=&#x27;</span> + v <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.items()]</span><br><span class=\"line\">[<span class=\"string\">&#x27;y=B&#x27;</span>, <span class=\"string\">&#x27;x=A&#x27;</span>, <span class=\"string\">&#x27;z=C&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>对list中的字符串全操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;World&#x27;</span>, <span class=\"string\">&#x27;IBM&#x27;</span>, <span class=\"string\">&#x27;Apple&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[s.lower() <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> L]</span><br><span class=\"line\">[<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>, <span class=\"string\">&#x27;ibm&#x27;</span>, <span class=\"string\">&#x27;apple&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"if…else\"><a href=\"#if…else\" class=\"headerlink\" title=\"if…else\"></a>if…else</h3><p>跟在<code>for</code>后面的<code>if</code>是一个筛选条件，不能带<code>else</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[x <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>)]</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span></span><br><span class=\"line\">    [x <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>)]</span><br><span class=\"line\">                       ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n\n<p>这是因为<code>for</code>前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果。因此，考察表达式：<code>x if x % 2 == 0</code>，它无法根据<code>x</code>计算出结果，因为缺少<code>else</code>，必须加上<code>else</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;[x <span class=\"keyword\">if</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span> <span class=\"keyword\">else</span> -x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">11</span>)]</span><br><span class=\"line\">[-<span class=\"number\">1</span>,<span class=\"number\">2</span>,-<span class=\"number\">3</span>,<span class=\"number\">4</span>,-<span class=\"number\">5</span>,<span class=\"number\">6</span>,-<span class=\"number\">7</span>,<span class=\"number\">8</span>,-<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上述<code>for</code>前面的表达式<code>x if x % 2 == 0 else -x</code>才能根据<code>x</code>计算出确定的结果。</p>\n<p>可见，在一个列表生成式中，<code>for</code>前面的<code>if ... else</code>是表达式，而<code>for</code>后面的<code>if</code>是过滤条件，不能带<code>else</code>。</p>\n<p><strong>for 前必有else， for后有if</strong></p>\n<p>如果list中既包含字符串，又包含整数，由于非字符串类型没有<code>lower()</code>方法，所以列表生成式会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\">L1 = [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;World&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;Apple&#x27;</span>, <span class=\"literal\">None</span>]</span><br><span class=\"line\">L2 = [x.lower() <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> L1 <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(x,<span class=\"built_in\">str</span>)==<span class=\"literal\">True</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p>\n<p>第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;g=(x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\">&gt;&gt;&gt;g</span><br><span class=\"line\">&lt;generator <span class=\"built_in\">object</span> &lt;genexpr&gt; at <span class=\"number\">0x1022ef630</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过<code>next()</code>函数获得generator的下一个返回值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">49</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\"><span class=\"number\">81</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">StopIteration</span><br></pre></td></tr></table></figure>\n\n<p>但是一遍一遍调用next（g）实在是太变态了，正确：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;g=(x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> g:</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"built_in\">print</span>(n)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"number\">49</span></span><br><span class=\"line\"><span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"number\">81</span></span><br></pre></td></tr></table></figure>\n\n<p>第二种是函数中有推算规则，并包含yield关键字，这个函数就不是普通函数，而是generator函数</p>\n<p>generator函数和普通函数的执行流程不一样，每次调用next（）执行，遇到yield就返回，再次执行时从上次返回的yield继续执行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">odd</span>()</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;step 1&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;step 2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;step 3&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p>调用generator函数时，首先要生成一个genertor对象，然后用next（）函数不断获得下一个返回值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;o=odd()</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">next</span>(o)</span><br><span class=\"line\">step <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(o)</span><br><span class=\"line\">step <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(o)</span><br><span class=\"line\">step <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(o)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">StopIteration</span><br></pre></td></tr></table></figure>\n\n<p>$$<br>请务必注意：调用generator函数会创建一个generator对象，多次调用generator函数会创建多个相互独立的generator。<br>$$</p>\n<p>如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(odd())</span><br><span class=\"line\">step <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(odd())</span><br><span class=\"line\">step <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(odd())</span><br><span class=\"line\">step <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>odd（）会创建一个新的generator对象，上述创建了3个完全独立的generator</p>\n<p>正确的写法是创建一个generator对象，然后不断对这一个generator对象调用<code>next()</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g = odd()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\">step <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\">step <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(g)</span><br><span class=\"line\">step <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>回到fib的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\"><span class=\"built_in\">max</span></span>):</span><br><span class=\"line\">\tn,a,b=<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> n&lt;<span class=\"built_in\">max</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span>(b)</span><br><span class=\"line\">\t\ta,b=b,a+b</span><br><span class=\"line\">\t\tn=n+<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;done&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>同样的，把函数改成generator函数后，我们基本上从来不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fib(<span class=\"number\">6</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(n)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n<p>但是拿不到generator的return语句返回值，如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;g=fib(<span class=\"number\">6</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\">...\t\tx=<span class=\"built_in\">next</span>(g)</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;g:&#x27;</span>,x)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Generator return value:&#x27;</span>, e.value)</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\">g: <span class=\"number\">1</span></span><br><span class=\"line\">g: <span class=\"number\">1</span></span><br><span class=\"line\">g: <span class=\"number\">2</span></span><br><span class=\"line\">g: <span class=\"number\">3</span></span><br><span class=\"line\">g: <span class=\"number\">5</span></span><br><span class=\"line\">g: <span class=\"number\">8</span></span><br><span class=\"line\">Generator <span class=\"keyword\">return</span> value: done   </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">triangles</span>():</span><br><span class=\"line\">    L=[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> L</span><br><span class=\"line\">        L1=[L[i]+L[i+<span class=\"number\">1</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(L)-<span class=\"number\">1</span>)]</span><br><span class=\"line\">        L=[<span class=\"number\">1</span>]+L1+[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 期待输出:</span></span><br><span class=\"line\"><span class=\"comment\"># [1]</span></span><br><span class=\"line\"><span class=\"comment\"># [1, 1]</span></span><br><span class=\"line\"><span class=\"comment\"># [1, 2, 1]</span></span><br><span class=\"line\"><span class=\"comment\"># [1, 3, 3, 1]</span></span><br><span class=\"line\"><span class=\"comment\"># [1, 4, 6, 4, 1]</span></span><br><span class=\"line\"><span class=\"comment\"># [1, 5, 10, 10, 5, 1]</span></span><br><span class=\"line\"><span class=\"comment\"># [1, 6, 15, 20, 15, 6, 1]</span></span><br><span class=\"line\"><span class=\"comment\"># [1, 7, 21, 35, 35, 21, 7, 1]</span></span><br><span class=\"line\"><span class=\"comment\"># [1, 8, 28, 56, 70, 56, 28, 8, 1]</span></span><br><span class=\"line\"><span class=\"comment\"># [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]</span></span><br><span class=\"line\">n = <span class=\"number\">0</span></span><br><span class=\"line\">results = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> triangles():</span><br><span class=\"line\">    results.append(t)</span><br><span class=\"line\">    n = n + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(t)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> results == [</span><br><span class=\"line\">    [<span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">21</span>, <span class=\"number\">35</span>, <span class=\"number\">35</span>, <span class=\"number\">21</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">28</span>, <span class=\"number\">56</span>, <span class=\"number\">70</span>, <span class=\"number\">56</span>, <span class=\"number\">28</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">36</span>, <span class=\"number\">84</span>, <span class=\"number\">126</span>, <span class=\"number\">126</span>, <span class=\"number\">84</span>, <span class=\"number\">36</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试通过!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>请注意区分普通函数和generator函数，普通函数调用直接返回结果,generator函数的调用实际返回一个generator对象.</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p>可直接作用于for循环的数据类型：str,list,tuple,dict,set</p>\n<p>还有一类是generator，包括生成器和带yield的generator function</p>\n<p>可以直接作用于for循环的对象称为可迭代对象：Iterable</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> collections.abc <span class=\"keyword\">import</span> Iterable</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>([], Iterable)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>(&#123;&#125;, Iterable)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>(<span class=\"string\">&#x27;abc&#x27;</span>, Iterable)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>((x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)), Iterable)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>(<span class=\"number\">100</span>, Iterable)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p>而生成器不仅可以作用于<code>for</code>循环，还可以被<code>next()</code>函数不断调用并返回下一个值，直到最后抛出<code>StopIteration</code>错误表示无法继续返回下一个值了。</p>\n<p><strong>可以被next（）调用并不断返回下一个值的对象称为迭代器：Iterator</strong></p>\n<p>可以使用isinstance()判断一个对象是否是Iterator对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> collections.abc <span class=\"keyword\">import</span> Iterator</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>((x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)), Iterator)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>([], Iterator)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>(&#123;&#125;, Iterator)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>(<span class=\"string\">&#x27;abc&#x27;</span>, Iterator)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。</strong></p>\n<p>迭代器！&#x3D;可迭代对象</p>\n<p>把list，dict,str等Iterable变成Iterator可以用iter（）函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>(<span class=\"built_in\">iter</span>([]), Iterator)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>(<span class=\"built_in\">iter</span>(<span class=\"string\">&#x27;abc&#x27;</span>), Iterator)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>python的Iterator表示的是一个数据流，可以看作是有序数列，但是我们不知道其长度，只能通过不断next（）实现按需计算下一个数据，所以Iterator的计算是惰性的</p>\n<p>所以Iterator甚至可以表示一个无限大的数据流，这是list无法办到的</p>\n<p><em>小结</em>：凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p>\n<p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p>\n<p>PYTHON的for循环本质上就是通过不断调用next（）函数实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上等于：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#首先获得Iterator</span></span><br><span class=\"line\">it=<span class=\"built_in\">iter</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"comment\">#循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">#获得下一个值：</span></span><br><span class=\"line\">\t\tx=<span class=\"built_in\">next</span>(it)</span><br><span class=\"line\">\t<span class=\"keyword\">except</span>: StopIeration:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><p>变量可以指向函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = <span class=\"built_in\">abs</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f(-<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"传入函数：\"><a href=\"#传入函数：\" class=\"headerlink\" title=\"传入函数：\"></a>传入函数：</h3><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y, f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(x) + f(y)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"map-x2F-reduce\"><a href=\"#map-x2F-reduce\" class=\"headerlink\" title=\"map&#x2F;reduce:\"></a>map&#x2F;reduce:</h3><p>map是多个Iterable代入函数中：**<code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。**</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> x * x</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = <span class=\"built_in\">map</span>(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(r)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code>map()</code>传入的第一个参数是<code>f</code>，即函数对象本身。由于结果<code>r</code>是一个<code>Iterator</code>，<code>Iterator</code>是惰性序列，因此通过<code>list()</code>函数让它把整个序列都计算出来并返回一个list。</p>\n<p><code>map()</code>作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)&#x3D;x2，还可以计算任意复杂的函数，比如，把这个list所有数字转为字符串：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]))</span><br></pre></td></tr></table></figure>\n\n<p><strong>再看reduce：</strong></p>\n<p><code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure>\n\n<p>当然求和运算可以直接用Python内建函数<code>sum()</code>，没必要动用<code>reduce</code>。</p>\n<p>但是如果要把序列<code>[1, 3, 5, 7, 9]</code>变换成整数<code>13579</code>，<code>reduce</code>就可以派上用场：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">fn</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> x * <span class=\"number\">10</span> + y</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>reduce(fn, [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])</span><br><span class=\"line\"><span class=\"number\">13579</span></span><br></pre></td></tr></table></figure>\n\n<p>如果考虑到字符串<code>str</code>也是一个序列，对上面的例子稍加改动，配合<code>map()</code>，我们就可以写出把<code>str</code>转换为<code>int</code>的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">fn</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> x * <span class=\"number\">10</span> + y</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">char2num</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    digits = &#123;<span class=\"string\">&#x27;0&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;3&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;4&#x27;</span>: <span class=\"number\">4</span>, <span class=\"string\">&#x27;5&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;6&#x27;</span>: <span class=\"number\">6</span>, <span class=\"string\">&#x27;7&#x27;</span>: <span class=\"number\">7</span>, <span class=\"string\">&#x27;8&#x27;</span>: <span class=\"number\">8</span>, <span class=\"string\">&#x27;9&#x27;</span>: <span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> digits[s]</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>reduce(fn, <span class=\"built_in\">map</span>(char2num, <span class=\"string\">&#x27;13579&#x27;</span>))</span><br><span class=\"line\"><span class=\"number\">13579</span></span><br></pre></td></tr></table></figure>\n\n<p>整理成str2int的函数就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"></span><br><span class=\"line\">DIGITS=&#123;<span class=\"string\">&#x27;0&#x27;</span>:<span class=\"number\">0</span>,<span class=\"string\">&#x27;1&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;3&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;4&#x27;</span>: <span class=\"number\">4</span>, <span class=\"string\">&#x27;5&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;6&#x27;</span>: <span class=\"number\">6</span>, <span class=\"string\">&#x27;7&#x27;</span>: <span class=\"number\">7</span>, <span class=\"string\">&#x27;8&#x27;</span>: <span class=\"number\">8</span>, <span class=\"string\">&#x27;9&#x27;</span>: <span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">str2int</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">fn</span>(<span class=\"params\">x,y</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x*<span class=\"number\">10</span>+y</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">char2num</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> DIGIT[s]</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> reduce(fn,<span class=\"built_in\">map</span>(char2num,s))</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p>还可以用lambda函数进一步简化成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\">DIGITS=&#123;<span class=\"string\">&#x27;0&#x27;</span>:<span class=\"number\">0</span>,<span class=\"string\">&#x27;1&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;3&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;4&#x27;</span>: <span class=\"number\">4</span>, <span class=\"string\">&#x27;5&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;6&#x27;</span>: <span class=\"number\">6</span>, <span class=\"string\">&#x27;7&#x27;</span>: <span class=\"number\">7</span>, <span class=\"string\">&#x27;8&#x27;</span>: <span class=\"number\">8</span>, <span class=\"string\">&#x27;9&#x27;</span>: <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">char2num</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> DIGIT[s]</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">str2int</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> reduce(<span class=\"keyword\">lambda</span> x,y:x*<span class=\"number\">10</span>+y,<span class=\"built_in\">map</span>(char2num,s))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><p>利用<code>map()</code>函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>[&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]</code>，输出：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">normalize</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name.title() </span><br></pre></td></tr></table></figure>\n\n<p>请编写一个<code>prod()</code>函数，可以接受一个list并利用<code>reduce()</code>求积：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prod</span>(<span class=\"params\">L</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fn</span>(<span class=\"params\">x,y</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x*y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reduce(fn,L)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>用于过滤序列，接收一个函数和一个序列，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">is_odd</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n%<span class=\"number\">2</span>==<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(is_odd,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>]))</span><br></pre></td></tr></table></figure>\n\n<p>把一个序列空字符删掉：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">not_empty</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s <span class=\"keyword\">and</span> s.strip()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(not_empty,[<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>,<span class=\"literal\">None</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27; &#x27;</span>]))</span><br></pre></td></tr></table></figure>\n\n<p> 关键在于筛选函数，但是filter返回的仍是Iterator，所以要强迫<code>filter()</code>完成计算结果，需要用<code>list()</code>函数获得所有结果并返回list</p>\n<p><strong>用filter求素数：</strong></p>\n<p>埃氏筛法：</p>\n<p>用Python来实现这个算法，可以先构造一个从<code>3</code>开始的奇数序列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_0dd_iter</span>():</span><br><span class=\"line\">\tn=<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\tn=n+<span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> n</span><br></pre></td></tr></table></figure>\n\n<p>生成器，无限序列。</p>\n<p>定义一个筛选函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_not_divisible</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> x:x%n&gt;<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>定义一个生成器，不断返回下一个素数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">primes</span>():</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">\tit=_odd_iter()<span class=\"comment\">#初始序列</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\tn=<span class=\"built_in\">next</span>(it)</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> n</span><br><span class=\"line\">\t\tit=<span class=\"built_in\">filter</span>(_not_divisible(n),it)</span><br></pre></td></tr></table></figure>\n\n<p>生成器先返回第一个素数2，然后，利用filter（）不断产生筛选后的新的序列</p>\n<p>由于primes（）也是一个无限序列，所以调用时需要设置一个退出循环的条件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#打印1000以内的素数：</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> primes():</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n&lt;<span class=\"number\">1000</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(n)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>回数是指从左向右读和从右向左读都是一样的数，例如<code>12321</code>，<code>909</code>。请利用<code>filter()</code>筛选出回数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">is_palindrome</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        w = <span class=\"number\">0</span></span><br><span class=\"line\">        L = []</span><br><span class=\"line\">        a = n</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">int</span>(n) != <span class=\"number\">0</span>:</span><br><span class=\"line\">            N = n % <span class=\"number\">10</span></span><br><span class=\"line\">            n = n / <span class=\"number\">10</span></span><br><span class=\"line\">            L.append(<span class=\"built_in\">int</span>(N))</span><br><span class=\"line\">            w = w + <span class=\"number\">1</span></span><br><span class=\"line\">            i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> L[<span class=\"number\">0</span> + i] == L[<span class=\"built_in\">len</span>(L)-<span class=\"number\">1</span> - i]:</span><br><span class=\"line\">            i = i + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == <span class=\"built_in\">int</span>(<span class=\"built_in\">len</span>(L)/<span class=\"number\">2</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># 测试:</span></span><br><span class=\"line\">output = <span class=\"built_in\">filter</span>(is_palindrome, <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;1~1000:&#x27;</span>, <span class=\"built_in\">list</span>(output))</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(is_palindrome, <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">200</span>))) == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">66</span>, <span class=\"number\">77</span>, <span class=\"number\">88</span>, <span class=\"number\">99</span>, <span class=\"number\">101</span>, <span class=\"number\">111</span>, <span class=\"number\">121</span>, <span class=\"number\">131</span>, <span class=\"number\">141</span>, <span class=\"number\">151</span>, <span class=\"number\">161</span>, <span class=\"number\">171</span>, <span class=\"number\">181</span>, <span class=\"number\">191</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试成功!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)  </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#或者林一种</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">is_palindrome</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    a=<span class=\"built_in\">str</span>(n)</span><br><span class=\"line\"></span><br><span class=\"line\">    b=a[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a==b:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序算法：\"><a href=\"#排序算法：\" class=\"headerlink\" title=\"排序算法：\"></a>排序算法：</h3><p>sorted（）：对list进行排序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sorted</span>([<span class=\"number\">36</span>, <span class=\"number\">5</span>, -<span class=\"number\">12</span>, <span class=\"number\">9</span>, -<span class=\"number\">21</span>])</span><br><span class=\"line\">[-<span class=\"number\">21</span>, -<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">36</span>]</span><br></pre></td></tr></table></figure>\n\n<p>还可以接受一个key函数实现自定义排序，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sorted</span>([<span class=\"number\">36</span>, <span class=\"number\">5</span>, -<span class=\"number\">12</span>, <span class=\"number\">9</span>, -<span class=\"number\">21</span>], key=<span class=\"built_in\">abs</span>)</span><br><span class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">9</span>, -<span class=\"number\">12</span>, -<span class=\"number\">21</span>, <span class=\"number\">36</span>]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\26704\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220128103732031.png\" alt=\"image-20220128103732031\"></p>\n<p>其实排序结果与最终结果相牵连，但是最终结果表示</p>\n<p>字符串的sorted</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sorted</span>([<span class=\"string\">&#x27;bob&#x27;</span>, <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;Zoo&#x27;</span>, <span class=\"string\">&#x27;Credit&#x27;</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;Credit&#x27;</span>, <span class=\"string\">&#x27;Zoo&#x27;</span>, <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;bob&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>对字符串排序，是按照ASCII的大小比较的，由于<code>&#39;Z&#39; &lt; &#39;a&#39;</code>，结果，大写字母<code>Z</code>会排在小写字母<code>a</code>的前面。</p>\n<p>只要我们能用一个key函数把字符串映射为忽略大小写排序即可。忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写）再比较即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sorted</span>([<span class=\"string\">&#x27;bob&#x27;</span>, <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;Zoo&#x27;</span>, <span class=\"string\">&#x27;Credit&#x27;</span>],key=<span class=\"built_in\">str</span>.lower)</span><br><span class=\"line\">[<span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;bob&#x27;</span>, <span class=\"string\">&#x27;Credit&#x27;</span>, <span class=\"string\">&#x27;Zoo&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>要进行反向排序，不必改动key函数，只需传入第三个参数reverse&#x3D;True：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sorted</span>([<span class=\"string\">&#x27;bob&#x27;</span>, <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;Zoo&#x27;</span>, <span class=\"string\">&#x27;Credit&#x27;</span>], key=<span class=\"built_in\">str</span>.lower, reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">[<span class=\"string\">&#x27;Zoo&#x27;</span>, <span class=\"string\">&#x27;Credit&#x27;</span>, <span class=\"string\">&#x27;bob&#x27;</span>, <span class=\"string\">&#x27;about&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习\"></a>练习</h3><p>假设我们用一组tuple表示学生名字和成绩：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = [(<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"number\">75</span>), (<span class=\"string\">&#x27;Adam&#x27;</span>, <span class=\"number\">92</span>), (<span class=\"string\">&#x27;Bart&#x27;</span>, <span class=\"number\">66</span>), (<span class=\"string\">&#x27;Lisa&#x27;</span>, <span class=\"number\">88</span>)]</span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">L = [(<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"number\">75</span>), (<span class=\"string\">&#x27;Adam&#x27;</span>, <span class=\"number\">92</span>), (<span class=\"string\">&#x27;Bart&#x27;</span>, <span class=\"number\">66</span>), (<span class=\"string\">&#x27;Lisa&#x27;</span>, <span class=\"number\">88</span>)]</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">by_name</span>(<span class=\"params\">t</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t[<span class=\"number\">0</span>]</span><br><span class=\"line\">L2 = <span class=\"built_in\">sorted</span>(L, key=by_name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(L2)</span><br><span class=\"line\">再按成绩从高到低排序：</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">by_score</span>(<span class=\"params\">t</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -t[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"python笔记","slug":"python笔记","count":3,"path":"api/categories/python笔记.json"}],"tags":[{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"}]}